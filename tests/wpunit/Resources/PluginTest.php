<?php

namespace wpunit\Resources;

use StellarWP\Uplink\Container;
use StellarWP\Uplink\Register;
use StellarWP\Uplink\Resources\Collection;
use StellarWP\Uplink\Resources\Plugin;
use StellarWP\Uplink\Tests\UplinkTestCase;
use StellarWP\Uplink\Uplink;

class PluginTest extends UplinkTestCase {

	public function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub

		Register::plugin(
			'sample',
			'Lib Sample',
			'sample/index.php',
			Uplink::class,
			'1.0.10',
			Uplink::class
		);
	}

	public function test_check_for_updates_with_same_results() {
		$this->assertSame(
			[],
			$this->get_plugin()->check_for_updates( [] ),
			'Return same transient if it is not an object'
		);

		$result = $this->get_plugin()->check_for_updates( new \stdClass() );
		$this->assertEquals( new \stdClass(), $result, 'Transient should remain same since we do not make an api call' );
		$expected = (object) [
			'last_check'      => 0,
			'checked_version' => '',
			'update'          => null,
		];

		$this->assertSame( $expected[ 'checked_version' ], get_option( 'stellar_uplink_update_status_' . $this->get_plugin()->get_slug() ) );
	}

	/**
	 * @return Plugin
	 */
	private function get_plugin() {
		$collection = Container::init()->make( Collection::class );

		return $collection->current();
	}

}
